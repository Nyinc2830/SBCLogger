#!/usr/bin/python

__author__ = 'James Folk'
__version__ = '0.0.1'
__date__ = 'June 15 2016'

#Basic imports
from ctypes import *

#Phidget specific imports
from Phidgets.PhidgetException import PhidgetErrorCodes, PhidgetException
from Phidgets.Events.Events import SpatialDataEventArgs, AttachEventArgs, DetachEventArgs, ErrorEventArgs, TemperatureChangeEventArgs
from Phidgets.Phidget import Phidget
from Phidgets.Manager import Manager
from Phidgets.Phidget import PhidgetLogLevel

from datetime import datetime, date, time
import sqlite3

from InterfaceKit import AttachInterfaceKit
from Spatial import AttachSpatial
from Temperature import AttachTemperature
from Accelerometer import AttachAccelerometer
from Stepper import AttachStepper
from AdvancedServo import AttachAdvancedServo
from MotorControl import AttachMotorControl
from Bridge import AttachBridge
from Encoder import AttachEncoder
from GPS import AttachGPS
from IR import AttachIR
from PHSensor import AttachPHSensor
from RFID import AttachRFID
from Servo import AttachServo
from Analog import AttachAnalog
from LED import AttachLED
from TextLCD import AttachTextLCD

import sys, time
from daemon import Daemon
import os
import logging

from pydaemon import Daemon

#databasepath = '/usr/data/test.db'
databasepath = '/usr/data/phidgetdata.db'
loggingpath = '/usr/data/phidgetdata.log'

pidpath = "/var/run/phidgetlogging.pid"
pidloggingpath = "/usr/data/phidgetdaemondata.log"

#someVariable = (os.environ['PATH'])
#print("someVariable " + someVariable)

def createDB():

	try:
		conn = sqlite3.connect(databasepath, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)

		conn.execute('''CREATE TABLE IF NOT EXISTS PHIDGET_ATTACHED
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS PHIDGET_DETACHED
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS PHIDGET_ERROR
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		CODE INT NOT NULL,
		DESCRIPTION CHAR(512) NOT NULL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS INTERFACEKIT_INPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		STATE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS INTERFACEKIT_OUTPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		STATE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS INTERFACEKIT_SENSORCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VALUE INT);''')

############################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS SPATIAL_DATACHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		ACCELERATION_X REAL,
		ACCELERATION_Y REAL,
		ACCELERATION_Z REAL,
		ANGULARRATE_X REAL,
		ANGULARRATE_Y REAL,
		ANGULARRATE_Z REAL,
		MAGNETICFIELD_X REAL,
		MAGNETICFIELD_Y REAL,
		MAGNETICFIELD_Z REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS TEMPERATURE_CHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		TEMPERATURE REAL,
		POTENTIAL REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS ACCELEROMETER_CHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		ACCELERATION REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS STEPPER_CURRENTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		CURRENT REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS STEPPER_INPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		STATE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS STEPPER_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS STEPPER_VELOCITYCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VELOCITY REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS ADVANCEDSERVO_CURRENTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		CURRENT REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS ADVANCEDSERVO_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS ADVANCEDSERVO_VELOCITYCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VELOCITY REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_BACKEMFUPDATE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VOLTAGE REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_CURRENTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		CURRENT REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_CURRENTUPDATE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		CURRENT REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_INPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		STATE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_POSITIONUPDATE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_SENSORUPDATE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VALUE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS MOTORCONTROL_VELOCITYCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VELOCITY REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS BRIDGE_DATA
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VALUE REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS ENCODER_INPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		STATE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS ENCODER_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS FREQUENCY_COUNT
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		TIME INT, 
		COUNTS INT);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS GPS_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS GPS_POSITIONFIXSTATUSCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS IR_CODE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		CODE REAL,
		REPEAT REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS IR_LEARN
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		CODE REAL,
		CODEINFO REAL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS IR_RAWDATA
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		RAWDATA REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS PHSENSOR_CHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		PH REAL);''')

##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS RFID_OUTPUTCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		VALUE INT);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS RFID_TAG
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		TAG CHAR(512) NOT NULL);''')

		conn.execute('''CREATE TABLE IF NOT EXISTS RFID_TAGLOST
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		TAG CHAR(512) NOT NULL);''')


##########################################################################

		conn.execute('''CREATE TABLE IF NOT EXISTS SERVO_POSITIONCHANGE
		(ID INTEGER PRIMARY KEY AUTOINCREMENT,
		LOGTIME DATE NOT NULL,
		SERIALNUMBER INT NOT NULL,
		IDX INT,
		POSITION REAL);''')

##########################################################################

		conn.commit()
		conn.close()
	except sqlite3.Error as e:
		print "An error occurred:", e.args[0]

def managerDeviceAttached(event):
	deviceClass = event.device.getDeviceClass()

	event.device.enableLogging(PhidgetLogLevel.PHIDGET_LOG_VERBOSE, loggingpath)

	try:
		conn = sqlite3.connect(databasepath, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)
		conn.execute("INSERT INTO PHIDGET_ATTACHED VALUES(NULL, ?, ?)" , (datetime.now(), event.device.getSerialNum()))
		conn.commit()
		conn.close()
	except sqlite3.Error as e:
		print "An error occurred:", e.args[0]


	if   deviceClass ==  2:AttachAccelerometer(databasepath, event.device.getSerialNum())
	elif deviceClass ==  3:AttachAdvancedServo(databasepath, event.device.getSerialNum())
	elif deviceClass == 22:AttachAnalog(databasepath, event.device.getSerialNum())
	elif deviceClass == 23:AttachBridge(databasepath, event.device.getSerialNum())
	elif deviceClass ==  4:AttachEncoder(databasepath, event.device.getSerialNum())
	elif deviceClass == 21:AttachFrequencyCounter(databasepath, event.device.getSerialNum())
	elif deviceClass ==  5:AttachGPS(databasepath, event.device.getSerialNum())
	elif deviceClass ==  7:AttachInterfaceKit(databasepath, event.device.getSerialNum())
	elif deviceClass == 19:AttachIR(databasepath, event.device.getSerialNum())
	elif deviceClass ==  8:AttachLED(databasepath, event.device.getSerialNum())
	elif deviceClass ==  9:AttachMotorControl(databasepath, event.device.getSerialNum())
	elif deviceClass ==  1:print("Attach Nothing")
	elif deviceClass == 10:AttachPHSensor(databasepath, event.device.getSerialNum())
	elif deviceClass == 11:AttachRFID(databasepath, event.device.getSerialNum())
	elif deviceClass == 12:AttachServo(databasepath, event.device.getSerialNum())
	elif deviceClass == 20:AttachSpatial(databasepath, event.device.getSerialNum())
	elif deviceClass == 13:AttachStepper(databasepath, event.device.getSerialNum())
	elif deviceClass == 14:AttachTemperature(databasepath, event.device.getSerialNum())
	elif deviceClass == 15:AttachTextLCD(databasepath, event.device.getSerialNum())
	elif deviceClass == 16:print("TEXTLED not supported")
	elif deviceClass == 17:print("WEIGHTSENSOR not supported")
	#TEXTLED = 16
	#WEIGHTSENSOR = 17
	

def managerDeviceDetached(event):
	try:
		conn = sqlite3.connect(databasepath, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)
		conn.execute("INSERT INTO PHIDGET_DETACHED VALUES(NULL, ?, ?)", (datetime.now(), event.device.getSerialNum()))
		conn.commit()
		conn.close()
	except sqlite3.Error as e:
		print "An error occurred:", e.args[0]

def managerErrorHandler(event):
	device = event.device
	description = event.description
	eCode = event.eCode
	try:
		conn = sqlite3.connect(databasepath, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)
		conn.execute("INSERT INTO PHIDGET_ERROR VALUES(NULL, ?, ?, ?, ?)", (datetime.now(), event.device.getSerialNum(), event.eCode, event.description))
		conn.commit()
		conn.close()
	except sqlite3.Error as e:
		print "An error occurred:", e.args[0]

def managerServerConnect(event):
	device = event.device
	print("Manager - Device %i: %s Connected!" % (device.getSerialNum(), device.getDeviceName()))

def managerServerDisconnect(event):
	device = event.device
	print("Manager - Device %i: %s Disconnected!" % (device.getSerialNum(), device.getDeviceName()))


def my_main():
	logging.debug("I'm starting...")
	createDB()

	try:
		manager = Manager()
	except RuntimeError as e:
		print("RuntimeException: %s" % e.details)
		print("Exiting...")
		exit(1)

	try:
		manager.setOnAttachHandler(managerDeviceAttached)
		manager.setOnDetachHandler(managerDeviceDetached)
		manager.setOnErrorHandler(managerErrorHandler)
		manager.setOnServerConnectHandler(managerServerConnect)
		manager.setOnServerDisconnectHandler(managerServerDisconnect)
		manager.openManager()

	except PhidgetException as e:
		print("Phidget Exception %i: %s" % (e.code, e.details))
		print("Exiting...")
		exit(1)
	try:
		manager.openManager()
	except PhidgetException as e:
		print("Phidget Exception %i: %s" % (e.code, e.details))
		print("Exiting...")
		exit(1)

	print("Press Enter to quit...")
	chr = sys.stdin.read(1)
	print("Closing...")

	try:
		manager.closeManager()
	except PhidgetException as e:
		print("Phidget Exception %i: %s" % (e.code, e.details))
		print("Exiting...")
		exit(1)
	print("Done.")
	exit(0)

class PhidgetDaemon(Daemon):
	def run(self):
		logging.debug("I'm starting...")
		createDB()

		try:
			self.manager = Manager()
		except RuntimeError as e:
			print("RuntimeException: %s" % e.details)
			print("Exiting...")
			exit(1)

		try:
			self.manager.setOnAttachHandler(managerDeviceAttached)
			self.manager.setOnDetachHandler(managerDeviceDetached)
			self.manager.setOnErrorHandler(managerErrorHandler)
			self.manager.setOnServerConnectHandler(managerServerConnect)
			self.manager.setOnServerDisconnectHandler(managerServerDisconnect)
			self.manager.openManager()

		except PhidgetException as e:
			print("Phidget Exception %i: %s" % (e.code, e.details))
			print("Exiting...")
			exit(1)
		try:
			self.manager.openManager()
		except PhidgetException as e:
			print("Phidget Exception %i: %s" % (e.code, e.details))
			print("Exiting...")
			exit(1)
		while True:
			logging.debug("I'm here...")
			time.sleep(1)

	def cleanup(self):
		logging.debug("I'm finishing...")
		try:
			self.manager.closeManager()
		except PhidgetException as e:
			print("Phidget Exception %i: %s" % (e.code, e.details))
			print("Exiting...")
			exit(1)

#if __name__ == "__main__":
	#logging.basicConfig(filename="phidgetdaemondata.log", level=logging.DEBUG)
	#daemon = PhidgetDaemon(pidpath, "PhidgetDaemon")
	#daemon.main()

if __name__ == "__main__":
	my_main()
